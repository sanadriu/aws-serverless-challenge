AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Serverless AWS Challenge: Blogs API"

Parameters:
  EnvironmentMode:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Enter "dev" or "prod". Default is "dev".
  ClientURLs:
    Type: CommaDelimitedList
    Description: List of URLs allowed to access to the user pool.
  
Globals:
  Function:
    Timeout: 15
    Runtime: nodejs14.x
    CodeUri: api/
    Architectures:
      - x86_64
    Environment:
      Variables:
        tableName: !Ref BlogsTable
        mode: !Ref EnvironmentMode

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${AWS::StackName}-user-pool'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub '${AWS::StackName}-user-pool-client'
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs: !Ref ClientURLs
      LogoutURLs: !Ref ClientURLs

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Ref AWS::AccountId

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref EnvironmentMode
      Description: !Sub 'HTTP Serverless API for ${EnvironmentMode} stage'
      Auth:
        Authorizers:
          Cognito:
            AuthorizationScopes:
              - email
            JwtConfiguration:
              issuer: !Sub 'https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}'
              audience: 
                - !Ref UserPoolClient
            IdentitySource: "$request.header.Authorization"

  GetBlogsFunction:
    Type: AWS::Serverless::Function
    DependsOn: BlogsTable
    Properties:
      FunctionName: !Sub '${AWS::StackName}-lambda-GetBlogs'
      Handler: src/handlers/getBlogs.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BlogsTable
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /blogs
            Method: GET
            ApiId: !Ref HttpApi

  GetBlogFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-lambda-GetBlog'
      Handler: src/handlers/getBlog.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BlogsTable
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /blogs/{id}
            Method: GET
            ApiId: !Ref HttpApi

  CreateBlogFunction:
    Type: AWS::Serverless::Function
    DependsOn: BlogsTable
    Properties:
      FunctionName: !Sub '${AWS::StackName}-lambda-CreateBlog'
      Handler: src/handlers/createBlog.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BlogsTable
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /blogs
            Method: POST  
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: Cognito
  
  UpdateBlogFunction:
    Type: AWS::Serverless::Function
    DependsOn: BlogsTable
    Properties:
      FunctionName: !Sub '${AWS::StackName}-lambda-UpdateBlog'
      Handler: src/handlers/updateBlog.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BlogsTable
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /blogs/{id}
            Method: PATCH
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: Cognito

  DeleteBlogFunction:
    Type: AWS::Serverless::Function
    DependsOn: BlogsTable
    Properties:
      FunctionName: !Sub '${AWS::StackName}-lambda-DeleteBlog'
      Handler: src/handlers/deleteBlog.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BlogsTable
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /blogs/{id}
            Method: DELETE
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: Cognito

  BlogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-table-Blogs'
      BillingMode: PAY_PER_REQUEST 
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: updatedAt
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: BlogsDevGSI-1
          KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: BlogsDevGSI-2
          KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: updatedAt
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
            
Outputs:
  UserPoolId: 
    Description: User pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: User pool client application ID
    Value: !Ref UserPoolClient

  AuthUrl:
    Description: Authentication URL
    Value: !Sub 'https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com'

  ApiUrl:
    Description: API Url
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentMode}'