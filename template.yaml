AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Serverless AWS Challenge: Blogs API (Adrian)"

Parameters:
  EnvironmentMode:
    Type: String
    Description: Enter "dev" or "prod". Default is "dev".
    Default: dev
    AllowedValues:
      - dev
      - prod
  ClientURLs:
    Type: CommaDelimitedList
    Description: List of URLs allowed to access to the user pool.

Globals:
  Function:
    Timeout: 15
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    Environment:
      Variables:
        mode: 
          Ref: EnvironmentMode
        blogsTableName:
          Fn::GetAtt: [ BlogsTableName, Value ]
        blogsIdxCreatedAt: 
          Fn::GetAtt: [ BlogsTableIdxCreatedAt, Value ]
        blogsIdxUpdatedAt:
          Fn::GetAtt: [ BlogsTableIdxUpdatedAt, Value ]
        
Resources:
  BlogsTableName:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: 
        Fn::Sub: /${AWS::StackName}/table/name
      Tier: Standard
      DataType: text
      Type: String
      Value: 
        Fn::Sub: '${AWS::StackName}-BlogsTable' 

  BlogsTableIdxCreatedAt:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: 
        Fn::Sub: /${AWS::StackName}/table/idx-createdAt
      Tier: Standard
      DataType: text
      Type: String
      Value: BlogsTable-idx-createdAt

  BlogsTableIdxUpdatedAt:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: 
        Fn::Sub: /${AWS::StackName}/table/idx-updatedAt
      Tier: Standard
      DataType: text
      Type: String
      Value: BlogsTable-idx-updatedAt

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: 
        Fn::Sub: '${AWS::StackName}-UserPool'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: 
        Ref: UserPool
      ClientName: 
        Fn::Sub: '${AWS::StackName}-AppClient'
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs: 
        Ref: ClientURLs
      LogoutURLs: 
        Ref: ClientURLs

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: 
        Ref: UserPool
      Domain: 
        Fn::Sub: '${AWS::StackName}-${AWS::AccountId}'

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName:
        Ref: EnvironmentMode
      Description:
        Fn::Sub: HTTP Serverless API for ${EnvironmentMode} stage
      Auth:
        Authorizers:
          Cognito:
            AuthorizationScopes:
            - email
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
              - Ref: UserPoolClient
            IdentitySource: $request.header.Authorization

  Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes: 
        - nodejs14.x
      ContentUri: src/layer
      LayerName: 
        Fn::Sub: '${AWS::StackName}-deps'
      RetentionPolicy: Delete

  GetUserClaims:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 
        Fn::Sub: '${AWS::StackName}-GetUserClaims'
      CodeUri: src/handlers/getUserClaims
      Handler: handler.handler
      Layers:
        - Ref: Layer
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /claims
            Method: GET
            ApiId: 
              Ref: HttpApi

  GetBlogsFunction:
    Type: AWS::Serverless::Function
    DependsOn: BlogsTable
    Properties:
      FunctionName: 
        Fn::Sub: '${AWS::StackName}-GetBlogs'
      CodeUri: src/handlers/getBlogs
      Handler: handler.handler
      Layers:
        - Ref: Layer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Ref: BlogsTable
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /blogs
            Method: GET
            ApiId: 
              Ref: HttpApi

  GetBlogFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 
        Fn::Sub: '${AWS::StackName}-GetBlog'
      CodeUri: src/handlers/getBlog
      Handler: handler.handler
      Layers:
        - Ref: Layer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Ref: BlogsTable
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /blogs/{id}
            Method: GET
            ApiId: 
              Ref: HttpApi

  CreateBlogFunction:
    Type: AWS::Serverless::Function
    DependsOn: BlogsTable
    Properties:
      FunctionName: 
        Fn::Sub: '${AWS::StackName}-CreateBlog'
      CodeUri: src/handlers/createBlog
      Handler: handler.handler
      Layers:
        - Ref: Layer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Ref: BlogsTable
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /blogs
            Method: POST  
            ApiId: 
              Ref: HttpApi
            Auth:
              Authorizer: Cognito
  
  UpdateBlogFunction:
    Type: AWS::Serverless::Function
    DependsOn: BlogsTable
    Properties:
      FunctionName: 
        Fn::Sub: '${AWS::StackName}-UpdateBlog'
      CodeUri: src/handlers/updateBlog
      Handler: handler.handler
      Layers:
        - Ref: Layer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Ref: BlogsTable
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /blogs/{id}
            Method: PATCH
            ApiId: 
              Ref: HttpApi
            Auth:
              Authorizer: Cognito

  DeleteBlogFunction:
    Type: AWS::Serverless::Function
    DependsOn: BlogsTable
    Properties:
      FunctionName: 
        Fn::Sub: '${AWS::StackName}-DeleteBlog'
      CodeUri: src/handlers/deleteBlog
      Handler: handler.handler
      Layers:
        - Ref: Layer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Ref: BlogsTable
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /blogs/{id}
            Method: DELETE
            ApiId: 
              Ref: HttpApi
            Auth:
              Authorizer: Cognito

  BlogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 
        Fn::GetAtt: [ BlogsTableName, Value ]
      BillingMode: PAY_PER_REQUEST 
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: updatedAt
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: 
            Fn::GetAtt: [ BlogsTableIdxCreatedAt, Value ]
          KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: 
            Fn::GetAtt: [ BlogsTableIdxUpdatedAt, Value ]
          KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: updatedAt
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
            
Outputs:
  UserPoolId: 
    Description: User pool ID
    Value: 
      Ref: UserPool

  AppClientId:
    Description: User pool client application ID
    Value: 
      Ref: UserPoolClient

  AuthUrl:
    Description: Authentication URL
    Value: 
      Fn::Sub: 'https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com'

  ApiUrl:
    Description: API Url
    Value: 
      Fn::Sub: 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentMode}'

      